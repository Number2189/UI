local utils = loadstring(game:HttpGet(GithubDirectory("Utils")))()

local dropdowns = {}

local runservice = game:GetService("RunService")

function dropdowns.Create(parent, theme, text, options, default, callback, overlay)
    local dropdown = Instance.new("Frame")
    dropdown.Name = "Dropdown"
    dropdown.Parent = parent
    dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dropdown.BorderSizePixel = 0
    dropdown.Size = UDim2.new(1, 0, 0, 25)
    dropdown.ZIndex = 28
    utils.CreateCorner(dropdown, 4)
    utils.CreateStroke(dropdown)

    local label = Instance.new("TextButton")
    label.Parent = dropdown
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Size = UDim2.new(1, -50, 1, 0)
    label.Font = Enum.Font.SourceSans
    label.Text = text .. ": " .. (default or options[1])
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 29

    local togglebutton = Instance.new("TextButton")
    togglebutton.Parent = dropdown
    togglebutton.BackgroundTransparency = 1
    togglebutton.Position = UDim2.new(1, -40, 0, 0)
    togglebutton.Size = UDim2.new(0, 30, 1, 0)
    togglebutton.Text = "▼"
    togglebutton.TextColor3 = Color3.fromRGB(255, 255, 255)
    togglebutton.TextSize = 12
    togglebutton.ZIndex = 29

    local optioncontainer = Instance.new("Frame")
    optioncontainer.Name = "OptionContainer"
    optioncontainer.Parent = game.Players.LocalPlayer.PlayerGui:FindFirstChild("UI")
    optioncontainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    optioncontainer.BorderSizePixel = 0
    optioncontainer.Size = UDim2.new(0, 220, 0, 0)
    optioncontainer.Visible = false
    optioncontainer.ZIndex = 28
    utils.CreateCorner(optioncontainer, 6)
    utils.CreateStroke(optioncontainer)

    local isopen = false
    local currentoption = default or options[1]

    local function updatedropdown()
        label.Text = text .. ": " .. currentoption
        if callback then callback(currentoption) end
    end

    local function toggledropdown()
        isopen = not isopen
        togglebutton.Text = isopen and "▲" or "▼"
        optioncontainer.Visible = isopen
        if isopen then
            local targetheight = math.min(#options, 8) * 28 + 12
            if overlay then
                overlay.Visible = true
                local dim = overlay:FindFirstChild("Dim")
                if dim then
                    dim.Visible = true
                    utils.Tween(dim, {BackgroundTransparency = 0.7}, 0.22):Play()
                end
            end
            utils.SpringTween(optioncontainer, {Size = UDim2.new(0, 220, 0, targetheight)}):Play()
            runservice:BindToRenderStep("DropdownCenter", Enum.RenderPriority.Input.Value, function()
                local ui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("UI")
                if ui and ui:FindFirstChild("WindowHolder") then
                    local mainframe = ui.WindowHolder:FindFirstChild("Main")
                    if mainframe and optioncontainer.Visible then
                        local mainpos = mainframe.AbsolutePosition
                        local mainsize = mainframe.AbsoluteSize
                        local containersize = optioncontainer.AbsoluteSize
                        optioncontainer.Position = UDim2.new(0, mainpos.X + mainsize.X/2 - containersize.X/2, 0, mainpos.Y + mainsize.Y/2 - containersize.Y/2)
                    end
                end
            end)
        else
            runservice:UnbindFromRenderStep("DropdownCenter")
            utils.Tween(optioncontainer, {Size = UDim2.new(0, 220, 0, 0)}, 0.2):Play()
            task.delay(0.22, function()
                if not isopen then
                    optioncontainer.Visible = false
                    if overlay then
                        local dim = overlay:FindFirstChild("Dim")
                        if dim then
                            utils.Tween(dim, {BackgroundTransparency = 1}, 0.22):Play()
                            task.delay(0.12, function()
                                dim.Visible = false
                            end)
                        end
                        overlay.Visible = false
                    end
                end
            end)
        end
    end

    for _, option in pairs(options) do
        local optionbutton = Instance.new("TextButton")
        optionbutton.Name = "OptionButton"
        optionbutton.Parent = optioncontainer
        optionbutton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        optionbutton.BorderSizePixel = 0
        optionbutton.Size = UDim2.new(1, -12, 0, 26)
        optionbutton.Position = UDim2.new(0, 6, 0, 6 + (_ - 1) * 28)
        optionbutton.Text = option
        optionbutton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionbutton.TextSize = 12
        optionbutton.Font = Enum.Font.SourceSans
        optionbutton.ZIndex = 28
        utils.CreateCorner(optionbutton, 4)

        optionbutton.MouseEnter:Connect(function()
            utils.Tween(optionbutton, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end)
        optionbutton.MouseLeave:Connect(function()
            utils.Tween(optionbutton, {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
        end)
        optionbutton.MouseButton1Click:Connect(function()
            currentoption = option
            updatedropdown()
            toggledropdown()
        end)
    end

    label.MouseButton1Click:Connect(toggledropdown)
    togglebutton.MouseButton1Click:Connect(toggledropdown)

    return {
        Instance = dropdown,
        Set = function(value)
            if table.find(options, value) then
                currentoption = value
                updatedropdown()
            end
        end,
        Get = function()
            return currentoption
        end
    }
end

return dropdowns
