local Lighting = game:GetService("Lighting")
local camera = workspace.CurrentCamera

local BLUR_SIZE = Vector2.new(10, 10)
local PART_SIZE = 0.01
local PART_TRANSPARENCY = 1 - 1e-7
local START_INTENSITY = 0.25

local BLUR_OBJ = Instance.new("DepthOfFieldEffect")
BLUR_OBJ.FarIntensity = 0
BLUR_OBJ.NearIntensity = START_INTENSITY
BLUR_OBJ.FocusDistance = 0.25
BLUR_OBJ.InFocusRadius = 0
BLUR_OBJ.Parent = Lighting

local PartsList = {}
local BlursList = {}
local BlurObjects = {}
local BlurredGui = {}

BlurredGui.__index = BlurredGui

function rayPlaneIntersect(planePos, planeNormal, rayOrigin, rayDirection)
	local n = planeNormal
	local d = rayDirection
	local v = rayOrigin - planePos

	local num = n.x*v.x + n.y*v.y + n.z*v.z
	local den = n.x*d.x + n.y*d.y + n.z*d.z
	local a = -num / den

	return rayOrigin + a * rayDirection, a
end

function rebuildPartsList()
	PartsList = {}
	BlursList = {}
	for blurObj, part in pairs(BlurObjects) do
		table.insert(PartsList, part)
		table.insert(BlursList, blurObj)
	end
end

function BlurredGui.new(frame, shape)
	local blurPart = Instance.new("Part")
	blurPart.Size = Vector3.new(1, 1, 1) * 0.01
	blurPart.Anchored = true
	blurPart.CanCollide = false
	blurPart.CanTouch = false
	blurPart.Material = Enum.Material.Glass
	blurPart.Transparency = PART_TRANSPARENCY
	blurPart.Parent = workspace.CurrentCamera

	local mesh
	if (shape == "Rectangle") then
		mesh = Instance.new("BlockMesh")
		mesh.Parent = blurPart
	elseif (shape == "Oval") then
		mesh = Instance.new("SpecialMesh")
		mesh.MeshType = Enum.MeshType.Sphere
		mesh.Parent = blurPart
	end
	
	local ignoreInset = false
	local currentObj = frame
	
	while true do
		currentObj = currentObj.Parent

		if (currentObj and currentObj:IsA("ScreenGui")) then
			ignoreInset = currentObj.IgnoreGuiInset
			break
		elseif (currentObj == nil) then
			break
		end
	end

	local new = setmetatable({
		Frame = frame;
		Part = blurPart;
		Mesh = mesh;
		IgnoreGuiInset = ignoreInset;
	}, BlurredGui)

	BlurObjects[new] = blurPart
	rebuildPartsList()

	game:GetService("RunService"):BindToRenderStep("AcrylicBlur_" .. tostring(new), Enum.RenderPriority.Camera.Value + 1, function()
		blurPart.CFrame = camera.CFrame * CFrame.new(0,0,0)
		BlurredGui.updateAll()
	end)
	return new
end

function updateGui(blurObj)
	if (not blurObj.Frame.Visible) then
		blurObj.Part.Transparency = 1
		return
	end
	
	local camera = workspace.CurrentCamera
	local frame = blurObj.Frame
	local part = blurObj.Part
	local mesh = blurObj.Mesh
	
	part.Transparency = PART_TRANSPARENCY
	
	local framePos = frame.AbsolutePosition
	local frameSize = frame.AbsoluteSize
	
	local corner0 = framePos + BLUR_SIZE
	local corner1 = corner0 + frameSize - BLUR_SIZE*2
	
	corner0 = Vector2.new(
		math.max(corner0.X, framePos.X),
		math.max(corner0.Y, framePos.Y)
	)
	corner1 = Vector2.new(
		math.min(corner1.X, framePos.X + frameSize.X),
		math.min(corner1.Y, framePos.Y + frameSize.Y)
	)
	
	local ray0, ray1

	if (blurObj.IgnoreGuiInset) then
		ray0 = camera:ViewportPointToRay(corner0.X, corner0.Y, 1)
		ray1 = camera:ViewportPointToRay(corner1.X, corner1.Y, 1)
	else
		ray0 = camera:ScreenPointToRay(corner0.X, corner0.Y, 1)
		ray1 = camera:ScreenPointToRay(corner1.X, corner1.Y, 1)
	end

	local planeOrigin = camera.CFrame.Position + camera.CFrame.LookVector * (0.05 - camera.NearPlaneZ)
	local planeNormal = camera.CFrame.LookVector
	local pos0 = rayPlaneIntersect(planeOrigin, planeNormal, ray0.Origin, ray0.Direction)
	local pos1 = rayPlaneIntersect(planeOrigin, planeNormal, ray1.Origin, ray1.Direction)

	local pos0 = camera.CFrame:PointToObjectSpace(pos0)
	local pos1 = camera.CFrame:PointToObjectSpace(pos1)

	local size = pos1 - pos0
	local center = (pos0 + pos1)/2

	mesh.Offset = center
	mesh.Scale = size / PART_SIZE
end

function BlurredGui.updateAll()
	for i = 1, #BlursList do
		updateGui(BlursList[i])
	end

	if #PartsList > 0 then
		local cframes = {}
		for i = 1, #PartsList do
			cframes[i] = workspace.CurrentCamera.CFrame
		end
        
		local filteredParts = {}
		for i = 1, #PartsList do
			if typeof(PartsList[i]) == "Instance" and PartsList[i]:IsA("BasePart") then
				table.insert(filteredParts, PartsList[i])
			end
		end
		workspace:BulkMoveTo(filteredParts, cframes, Enum.BulkMoveMode.FireCFrameChanged)
	end

	BLUR_OBJ.FocusDistance = 0.25 - camera.NearPlaneZ
end

function BlurredGui:Destroy()
	game:GetService("RunService"):UnbindFromRenderStep("AcrylicBlur_" .. tostring(self))
	self.Part:Destroy()
	BlurObjects[self] = nil
	rebuildPartsList()
end

function BlurredGui:SetIntensity(intensity)
	BLUR_OBJ.NearIntensity = intensity
end

return BlurredGui
